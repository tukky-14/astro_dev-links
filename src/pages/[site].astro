---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Sidebar from '../components/Sidebar.astro';
import { learningSites } from '../features/learning/learning';
import { articleSites } from '../features/article/article';
import { usefulSites } from '../features/useful/useful';
import { materialSites } from '../features/material/material';
import { aiSites } from '../features/ai/ai';
import { chromeSites } from '../features/chrome/chrome';
import { vscodeSites } from '../features/vscode/vscode';
import { appSites } from '../features/app/app';
import { youtubeSites } from '../features/youtube/youtube';
import { githubSites } from '../features/github/github';
import Menu from '../components/Menu.astro';
import MaterialSymbolsContentCopyOutline from '../components/MaterialSymbolsContentCopyOutline.astro';

export function getStaticPaths() {
    return [
        { params: { site: 'article' } },
        { params: { site: 'learning' } },
        { params: { site: 'useful' } },
        { params: { site: 'material' } },
        { params: { site: 'ai' } },
        { params: { site: 'chrome' } },
        { params: { site: 'vscode' } },
        { params: { site: 'app' } },
        { params: { site: 'youtube' } },
        { params: { site: 'github' } },
    ];
}

const { site } = Astro.params;
let sites: { title: string; url: string; image: string; description: string }[] = [];
switch (site) {
    case 'learning':
        sites = learningSites;
        break;
    case 'article':
        sites = articleSites;
        break;
    case 'useful':
        sites = usefulSites;
        break;
    case 'material':
        sites = materialSites;
        break;
    case 'ai':
        sites = aiSites;
        break;
    case 'chrome':
        sites = chromeSites;
        break;
    case 'vscode':
        sites = vscodeSites;
        break;
    case 'app':
        sites = appSites;
        break;
    case 'youtube':
        sites = youtubeSites;
        break;
    case 'github':
        sites = githubSites;
        break;
    default:
        sites = learningSites;
        break;
}
const sitesText = sites.map((site) => `${site.title}\n${site.url}\n`).join('\n');
---

<Layout>
    <div class="h-screen relative">
        <Menu />
        <Header />
        <input
            type="text"
            id="search"
            class="hidden absolute top-3 left-60 px-1.5 pr-1 py-0.5 rounded focus:outline-none text-gray-600 text-sm"
            placeholder="search"
        />
        <div class="flex h-[calc(100%_-_3rem)]">
            <Sidebar />
            <main
                class="sm:w-5/6 px-6 py-6 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8 overflow-scroll"
            >
                {
                    sites.map((site) => (
                        <a
                            href={site.url}
                            class="min-h-80 bg-gray-50 rounded animate-fade-in hover:border hover:border-indigo-400 hover:cursor-pointer"
                            target="_blank"
                            rel="noreferrer"
                        >
                            <img
                                class="w-full border-b border-blue-200"
                                src={site.image}
                                alt={`${site.title}のトップ画像`}
                            />
                            <p class="my-2 pl-3 font-bold">{site.title}</p>
                            <p class="mb-2 px-3 text-sm">{site.description}</p>
                        </a>
                    ))
                }
            </main>
        </div>
        <button
            id="copyIcon"
            class="hidden sm:block pr-6 text-blue-600 hover:opacity-80 absolute top-4 right-0"
        >
            <MaterialSymbolsContentCopyOutline />
        </button>
        <div id="copied" class="hidden absolute top-0 right-1 text-red-600 text-xs">copied!</div>
        <div class="hidden" id="sitesText">{sitesText}</div>
    </div>
</Layout>

<script>
    const copyIcon = document.getElementById('copyIcon');
    const sitesText = document.getElementById('sitesText');
    const copied = document.getElementById('copied');

    copyIcon?.addEventListener('click', () => {
        navigator.clipboard.writeText(sitesText?.textContent || '');
        copied?.classList.remove('hidden');
        setTimeout(() => {
            copied?.classList.add('hidden');
        }, 1000);
    });

    const search = document.getElementById('search');
    search?.addEventListener('input', () => {
        const searchValue = search.textContent?.toLowerCase() || '';
        const sites = document.querySelectorAll('.grid a');
        sites.forEach((site) => {
            const title = site.querySelector('p:nth-child(2)')?.textContent?.toLowerCase() || '';
            const description =
                site.querySelector('p:nth-child(3)')?.textContent?.toLowerCase() || '';
            if (title.includes(searchValue) || description.includes(searchValue)) {
                site.classList.remove('hidden');
            } else {
                site.classList.add('hidden');
            }
        });
    });
</script>
